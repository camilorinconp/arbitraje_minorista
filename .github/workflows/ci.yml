# .github/workflows/ci.yml

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: 3.12
  NODE_VERSION: 19

jobs:
  # === Backend Testing and Analysis ===
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: arbitraje_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Set up environment variables
      run: |
        cd backend
        cp ../.env.example .env
        echo "APP_ENV=testing" >> .env
        echo "DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/arbitraje_test" >> .env
        echo "TEST_DATABASE_URL=sqlite+aiosqlite:///./test.db" >> .env

    - name: Run configuration validation
      run: |
        cd backend
        python ../scripts/validate_config.py development

    - name: Run unit tests
      run: |
        cd backend
        python -m pytest tests/test_architecture_critical.py -v --tb=short

    - name: Run E2E configuration tests
      run: |
        cd backend
        python -m pytest tests/test_e2e_simple.py::test_database_connection_configuration -v
        python -m pytest tests/test_e2e_simple.py::test_rate_limiter_configuration -v
        python -m pytest tests/test_e2e_simple.py::test_observability_components -v

    - name: Check code formatting (ruff)
      run: |
        cd backend
        pip install ruff
        ruff check . --format=github

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: backend/test-results/

  # === Frontend Testing and Building ===
  frontend-test:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run type checking
      run: |
        cd frontend
        npm run type-check

    - name: Run tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Build production bundle
      run: |
        cd frontend
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build/

  # === Security and Quality Checks ===
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: [backend-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install bandit safety

    - name: Run Bandit security analysis
      run: |
        cd backend
        bandit -r . -f json -o bandit-report.json || true

    - name: Check for known vulnerabilities
      run: |
        cd backend
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json

  # === Docker Build and Test ===
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create backend Dockerfile
      run: |
        cat > backend/Dockerfile << 'EOF'
        FROM python:3.12-slim

        WORKDIR /app

        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            postgresql-client \
            && rm -rf /var/lib/apt/lists/*

        # Copy requirements first for better caching
        COPY requirements*.txt ./
        RUN pip install --no-cache-dir -r requirements.txt

        # Copy application code
        COPY . .

        # Create non-root user
        RUN useradd --create-home --shell /bin/bash app \
            && chown -R app:app /app
        USER app

        # Health check
        HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
            CMD python -c "import requests; requests.get('http://localhost:8000/observability/health', timeout=5)"

        EXPOSE 8000

        CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
        EOF

    - name: Build backend Docker image
      run: |
        cd backend
        docker build -t arbitraje-backend:${{ github.sha }} .

    - name: Test Docker image
      run: |
        # Test that image builds and can start
        docker run --rm --name test-container -d \
          -e DATABASE_URL=sqlite+aiosqlite:///./test.db \
          arbitraje-backend:${{ github.sha }}

        # Wait a bit for startup
        sleep 10

        # Check if container is still running
        docker ps | grep test-container || (echo "Container failed to start" && exit 1)

        # Stop test container
        docker stop test-container

  # === Production Deployment Validation ===
  production-validation:
    name: Production Readiness
    runs-on: ubuntu-latest
    needs: [security-analysis, docker-build]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Validate production configuration
      run: |
        cd backend
        python ../scripts/validate_config.py production --check-secrets || echo "⚠️ Production secrets validation failed (expected in CI)"

    - name: Check environment files
      run: |
        # Verify example files exist
        test -f .env.example || (echo "Missing .env.example" && exit 1)
        test -f .env.production || (echo "Missing .env.production template" && exit 1)

        # Check that production template has required variables
        grep -q "SECRET_KEY=" .env.production || (echo "Missing SECRET_KEY in production template" && exit 1)
        grep -q "DATABASE_URL=" .env.production || (echo "Missing DATABASE_URL in production template" && exit 1)
        grep -q "SUPABASE_URL=" .env.production || (echo "Missing SUPABASE_URL in production template" && exit 1)

    - name: Generate deployment checklist
      run: |
        cat > deployment-checklist.md << 'EOF'
        # 🚀 Deployment Checklist

        ## Pre-deployment
        - [ ] Update production environment variables
        - [ ] Configure production database
        - [ ] Set up Redis for rate limiting and cache
        - [ ] Configure monitoring and alerting
        - [ ] Run security scans
        - [ ] Test backup and recovery procedures

        ## Deployment
        - [ ] Deploy backend to production environment
        - [ ] Deploy frontend to CDN/static hosting
        - [ ] Configure load balancer and SSL
        - [ ] Run database migrations
        - [ ] Verify health checks pass
        - [ ] Test critical user flows

        ## Post-deployment
        - [ ] Monitor application metrics
        - [ ] Check error logs
        - [ ] Validate rate limiting
        - [ ] Test scraping functionality
        - [ ] Verify observability endpoints

        ## Rollback Plan
        - [ ] Database rollback scripts ready
        - [ ] Previous version Docker images available
        - [ ] Monitoring for rollback triggers configured
        EOF

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-checklist
        path: deployment-checklist.md

  # === Notification and Summary ===
  notify-completion:
    name: Notify CI/CD Completion
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-analysis, docker-build]
    if: always()

    steps:
    - name: Check CI/CD Results
      run: |
        echo "## 🔍 CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.backend-test.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.frontend-test.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Analysis | ${{ needs.security-analysis.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build | ${{ needs.docker-build.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY

        # Calculate overall status
        if [ "${{ needs.backend-test.result }}" = "success" ] &&
           [ "${{ needs.frontend-test.result }}" = "success" ] &&
           [ "${{ needs.security-analysis.result }}" = "success" ] &&
           [ "${{ needs.docker-build.result }}" = "success" ]; then
          echo "## 🎉 All checks passed! Ready for deployment." >> $GITHUB_STEP_SUMMARY
        else
          echo "## ⚠️ Some checks failed. Review before deployment." >> $GITHUB_STEP_SUMMARY
        fi